{"./":{"url":"./","title":"Introduction","keywords":"","body":"Documentation for Mozilla localizers This repository includes several documents describing topics of interest for localizers at Mozilla. If you’re reading these pages on GitHub, a version with improved readability and search capabilities is available here. Products How to localize and test Mozilla products: Firefox for desktop Firefox for Android Firefox for iOS mozilla.org Tools Mercurial tips Updating the documentation Simply open a pull request adding the new file or updating an existing document. Make sure to follow these style guidelines, and note that all pull requests need to be reviewed before merging. Update GitBook Follow these instructions to install GitBook locally (NodeJS is a prerequisite). If it’s the first time you use gitbook, run this command to install all required plugins: gitbook install Then run the following command from the root of the repository. gitbook build . docs If you want content to be linked from the sidebar, make sure to add it to SUMMARY.md. "},"products/firefox_desktop/":{"url":"products/firefox_desktop/","title":"Firefox for desktop","keywords":"","body":"L10n and Firefox for desktop Some documentation specific for common tasks regarding Firefox desktop and l10n: How to test Firefox on desktop. "},"products/firefox_desktop/testing.html":{"url":"products/firefox_desktop/testing.html","title":"How to test","keywords":"","body":"Testing Firefox Desktop Which build should I test? As a localizer you will work against Nightly, which means you should be testing a localized build of Firefox Nightly provided directly by Mozilla. You can download the build from the pre-release download page, the download page for all systems and locales, or directly via FTP (search for your locale code and operative system). Why Nightly? Because it’s updated every day, which means that you can fix an error and verify if the correction was effective the day after. It’s definitely a good approach to use this version as your main browser. At the same time, you, or someone in your team, should be testing also Beta and Release, to make sure updates don’t introduce issues. How to test Here are some tips on how to test Firefox once installed in your computer. Create a new profile From time to time create a new profile: To test that the default searchplugins are still relevant and work as expected. To check messages and pages displayed on first run. To test dialogs and preferences at the default size. Search for untranslated strings Open all the voices available in the main menu and check that they’re properly localized. If you opted to keep Developer Tools in English, the choice should be consistent across the browser. Check the \"hamburger\" menu for cut strings (unfortunately you’ll need to abbreviate some of them, if they’re not intelligible). Then choose to customize the menu and make sure everything is properly localized. Open Preferences/Options and navigate through all tabs, try to open all dialogs like Exceptions…. Make also sure to select the Custom settings option for History in the Privacy panel. Log in with you Firefox Account and make sure that all preferences and dialogs are properly localized. Check for untranslated strings and errors in the Library (Bookmarks->View all bookmarks…). Open a new Private Window and check the content of the page. Type about:support in the address bar, press Enter, and check for errors or missing translations. Check the error pages for malware, unwanted software, deceptive website. Check permissions dialogs on this test website. Visit secure and unsecure website, and check the i panel near the URL. Right click on a page and verify all panels in the View Page Info dialog. Testing webextension permissions dialog Create a new profile and open about:config in your browser: Right click on the list of available keys and create a new boolean key extensions.webextPermissionPrompts set to true. Search for the key xpinstall.signatures.required and set it to false. This will allow installing unsigned add-ons. Open this link, select Download and save the file on your computer. Drag the .xpi file on your browser’s window to display the dialog (you don’t need to actually install it). Test accesskeys and shortcuts You can test accesskeys only on Windows and Linux, since they’re not available in OS X. If your locale uses a non Latin alphabet and opted to keep the English accesskeys, you don’t have anything to check. If you’re localizing accesskeys, you should check that: Accesskeys use letters available in the associated label, and are not displayed between parenthesis at the end of the label itself. There are no conflicts, which means there are no items in the same menu or preference panel using the same letter. Starting from Firefox 56, it’s not possible to avoid conflicts in preferences: the guideline in that case is to reduce to a minimum the number of times the same letter is used within a panel. For shortcuts, you should test at least the most common ones. You should never change a shortcut, unless that combination of keys is not available in the keyboard layout commonly used for your locale. For example, in the Italian keyboard the character [ is available pressing Alt and è. A shortcut based on Shift + [ would never work, because it would be read as Alt + Shift + è. Test the installer on windows Download the installer version and make sure that everything is working correctly. In the FTP folder you have both the Full Installer and the Stub Installer (downloading the package from Internet). You should test both at least once., Photon Photon is the redesigned UI that will ship in Firefox 57: The hamburger menu will be replaced by a static dropdown menu. If you’re on Nightly and still see the old menu, make sure that browser.photon.structure.enabled is set to true in about:config (that's the default value in Nightly 56 and later). Test the Overflow menu: the >> symbol will appear automatically in the main toolbar when resizing the window to a small width. You can then pin an element to it, or add/remove items from the toolbar directly from their context menu. Test the onboarding tour by clicking the small fox displayed in the left corner on the New tab. There are also onboarding notifications, displayed at the bottom of the page: you can cycle through them by opening multiple new tabs in a row. Note that the onboarding is currently not compatible with Activity Stream. Firefox Health Report If you have just finished localizing Firefox Health Report, you’ll need to change a key in about:config in order to test against the stage server. Type about:config in the address bar, press Enter. Search for the key datareporting.healthreport.about.reportUrl. Set the value to https://fhr-dev.allizom.org/%LOCALE%/v4/. Type about:healthreport in the address bar and check that everything is correctly localized. "},"products/firefox_android/":{"url":"products/firefox_android/","title":"Firefox for Android","keywords":"","body":"L10n and Firefox for Android Some documentation specific for common tasks regarding Firefox for Android and l10n: How to localize Firefox for Android. How to test Firefox for Android. "},"products/firefox_android/how_to_localize.html":{"url":"products/firefox_android/how_to_localize.html","title":"How to localize","keywords":"","body":"Firefox for Android - How to localize The release cycle for Firefox for Android is the same as Firefox for Desktop, which is generally 6 weeks - but can sometimes be 8 weeks. You can see the detailed schedule for each release here. \"Merge day\" is when localizations move to the next train - and the last day available to include localization updates to the next Beta version if you work on tools like Pootle. Note: please make sure that you’ve already localized mozilla.org before you start working on Firefox for Android or any other projects. The importance of regularly checking your dashboard Checking for errors Please keep in mind during your entire localization process to regularly check your locale’s team page. You can just choose your locale from the list there, and bookmark it to easily access it in the future. Once you are on your team page, under the section \"Application & Sign-offs\", take a look at the \"Translation Status\" column. If you have any errors, they will show up in red there. The number of missing strings will also appear in that same column. You can click on either of these links to see what’s going on behind these notifications. If you notice any errors, they need to be fixed very quickly. This is extremely important because if you break something while your locale is shipping on multi-locale builds (so, the builds that actually ship on the Play Store), you will need to fix it as soon as possible since it breaks the build for everyone! Checking for warnings You should also be checking your locale’s Firefox for Android dashboard for any possible warnings. They would appear under the \"Warnings\" column. If you see you have a warning, then click on the \"Status\" column on that same line. It will explain where the warning is so you can go in and fix it. Checking your team page and dashboard regularly should be something you do from the very beginning when you start localizing a project, so that it becomes a habit. This helps reduce the chance of breaking the builds in the future, once your locale is actually shipping, and generally helps catch errors earlier on. It also gives you an overview of your locale’s health and status, and overall ensures you’re shipping a good quality localization. Localize the Firefox for Android folder Pontoon: choose your locale code from there. Pootle: choose your locale code from there. Once you’ve finished covering this folder, please note you still have strings to translate. See below for more instructions. Localize the shared Firefox strings In order to reach 100% completion on the Firefox for Android l10n project, you will have to localize the shared Firefox files (so, the ones common to Firefox Desktop and Android) as well. These are found in the Firefox folder: Pontoon: choose your locale code from there. Localize all file paths that start with dom, netwerk, security, services and toolkit. Pootle: choose your locale code from there. In the list you now see, localize the files found in \"androidshared\" folder. Once you’ve reached 100% completion for the shared strings: let the Fennec project manager know (currently delphine at mozilla dot com). A bug will be filed to add your locale to the single-locale builds. These builds are available here: https://ftp.mozilla.org/pub/mobile/nightly/latest-mozilla-central-android-api-15-l10n/. This means that you will be able to download a build on your Android device to test your locale. Please note that at this point, your locale still isn’t shipping on official Firefox for Android builds. That will come later. Considerations for brand new locales that have no Desktop version yet If you have not already launched Firefox Desktop in your language, then you are probably missing some important pieces, such as search engines. Bugs will need to be filed by l10n-drivers, and done by following filing out the form here: https://l10n.mozilla.org/bugs/new-locale Please read this Firefox for Android \"setup_searchplugins\" section for more details on how to add search plugins. Once you have finished localization work on Android and your locale is up on single-locale builds, you may now move to the testing phase. "},"products/firefox_android/testing.html":{"url":"products/firefox_android/testing.html","title":"How to test","keywords":"","body":"Testing Firefox for Android Testing on single-locale builds Once you have localized all the strings needed to complete the Firefox for Android project, and your language is now up on single-locale builds, you should start testing! This is the moment to engage as much people as possible: have them use and check-out these builds regularly. The more eyes on them, the better. First, authorize 3rd party app downloads from your Android phone’s settings. From your phone, download your locale from https://ftp.mozilla.org/pub/mobile/nightly/latest-mozilla-aurora-android-api-15-l10n/ by clicking on the most recent link with your locale code in it (Note: you may want to scroll down the page to make sure you are choosing the most recent build!) Then, choose the .apk link out of the 3 possible options listed. Download should start and once the app is installed, you should be able to test your locale. What to look out for? Language quality. Truncated words (cut-off from screen). Anything that appears broken on the UI. Check out at all the main screens, UI, menus, tabs, new features, etc. Make sure these all look good, that everything is properly translated and appears as expected. Font support. Check that all searchplugins are working correctly. It is strongly suggested to start using these builds on a daily basis, so that you can get into as many screens as possible and check that everything looks fine. It is important that the people testing the localization be not only the one(s) who have localized. Ask other people from your community to help test in order to have fresh eyes looking at your work. Testing on multi-locale builds (shipping in Play Store) Once the Fennec Project Manager (currently delphine at mozilla dot com) sees that you’ve done at least one cycle on a single-locale build, that nothing breaks during sign-offs, that you’ve continued keeping your work up to date, and that you have been TESTING it - l10n-drivers will consider adding your language to the multi-locale builds. This means that - congratulations! - your locale will now officially be shipping on Firefox for Android. Once your locale is added to the multi-locale builds, it will \"ride the trains\" like for Firefox Desktop. It will first ship on Aurora in the Play Store, then 6 weeks later it will ship on Beta, and 6 weeks after that, it will arrive on Release. Once you start shipping in the Play Store, it makes sense to stop testing on single-locale builds. It’s strongly suggested you now start testing and using the Aurora Play Store version, since this is the branch that you localize and work on. It’s good to have other members in the community use the beta and release version too though, in case anything breaks with updates. When testing the multi-locale build, keep in mind and look out for the same issues and aspects called out for the single-locale builds in the section above. l10n-drivers send out regular reminders about merge days, android updates, schedule and important info on dev.l10n mailing list. Please make sure you’re following this list closely so that you get regular updates about which part of the cycle you’re at, when you need to finish your work, and anything relevant to what you are doing. "},"products/firefox_ios/":{"url":"products/firefox_ios/","title":"Firefox for iOS","keywords":"","body":"L10n and Firefox for iOS Some documentation specific for common tasks regarding Firefox for iOS and l10n: Adding new iOS locales. How to test Firefox for iOS. "},"products/firefox_ios/adding_new_ios_locale.html":{"url":"products/firefox_ios/adding_new_ios_locale.html","title":"Adding a new locale","keywords":"","body":"Adding a new locale to Firefox for iOS Prerequisites iOS language support iOS currently supports two tiers of locales, and a locale must be part of that list in order to ship on Firefox for iOS. Unlike Firefox for Android, there’s no locale switcher included in the app, so it’s possible to ship only locales that are supported by iOS. Note that for Tier 2 locales, some menu items in Firefox for iOS can not be translated since they are part of the OS itself. Strings will unfortunately appear in English on the final UI in these cases. To tell if a locale is supported or not, it is also possible simply to take a look on an actual device, under the Language Settings of the most recent iOS version available. Tier one locales are the ones listed under “iPod/iPhone/iPad Language”, and Tier 2 locales appear under “Other Language” (or \"Add Language\" if there are already some languages under that list). If a locale appears under none of these two lists, then it should be safe to assume the language is not supported by iOS. Note though that RTL languages are not supported yet on Firefox for iOS (see RTL point below). App Store language support The App Store only supports a subset of locales, compared to what the OS itself supports. This list is always growing. If translation work starts on Firefox for iOS for a locale that is supported by the App Store, it will automatically be enabled under the locale’s corresponding appstore’s folder (which can be found either in Pontoon or GitHub). Note that App Store language support is not a requirement to translate the app itself. As long as a locale is supported by iOS (see point above), it's possible to ship it. Right-to-left locales At the time there is no right-to-left support on Firefox for iOS. Stay tuned. In the meantime, feel free to file any existing issues in Bugzilla and make sure it blocks the RTL Firefox for iOS meta bug. To get involved in the Firefox for iOS RTL effort and receive more details, you may contact directly delphine at mozilla dot com. Request to add a localization Once it is determined if a locale is supported by the operating system and can ship on Firefox for iOS, a request can be made to work on the project through the usual localization tools. For Pontoon, go to the Firefox for iOS project page here, and click on the link to request to add a new language to the project. For Pootle, please send an email to the Pootle Tech team (tech-team at translate dot org dot za) to request the project. It’s also possible to work directly from GitHub on the Firefox for iOS mozilla-l10n repo. Shipping Once pending localization work is complete for a given release, l10n-drivers will work on adding the locale to the list of shipping locales. Remember to regularly check the Firefox for iOS release schedule as well as the dev.l10n mailing list for latest information and updates on the project. "},"products/firefox_ios/testing.html":{"url":"products/firefox_ios/testing.html","title":"How to test","keywords":"","body":"Testing on iOS for a new release Localizers currently mostly rely on screenshots for testing. Latest information and updates about testing are provided on the dev.l10n mailing list, which you should follow if you are working on l10n for any of the existing Mozilla products. Testing with screenshots Screenshots are currently provided by the iOS team on dev.l10n, and the latest iterations can be found right here. Test builds While there are testing builds available on Test Flight, the process is currently manual and localizers should reach out to the l10n mobile PM in order to be added to these builds (currently delphine at mozilla dot com). Please note you will need an iOS device running v9 or above. Aspects to review Here is a list of issues you should try to identify when testing the build: Language quality. Truncated words (cut-off from screen). Anything that appears broken on the UI. Check out at all the main screens, UI, menus, tabs, new features, etc. Make sure these all look good, that everything is properly translated and appears as expected. Font support. Untranslated content. Concerning untranslated content: please note that we currently have two tiers of support in iOS. If your locale is only in the Tier 2 support list, then it sometimes happens that menu items, which are part of the OS itself, may not be localizable - and will therefore unfortunately appear in English on the final UI. Testing a brand new locale When a locale is brand new, l10n-drivers and the localization team will work through Bugzilla to process sign-offs on l10n testing. The l10n Mobile Project Manager will open up a meta bug for this and attach all needed bugs under their corresponding component. Closing the bug as resolved-fixed will signal that a locale is signing off on testing, and good to go for release. Details concerning all this process are always announced on the dev.l10n mailing list. "},"products/mozilla_org/":{"url":"products/mozilla_org/","title":"mozilla.org","keywords":"","body":"Working on mozilla.org Some documentation specific for common tasks on mozilla.org How to test mozilla.org. "},"products/mozilla_org/testing.html":{"url":"products/mozilla_org/testing.html","title":"How to test","keywords":"","body":"Testing Mozilla.org Mozilla.org is highly visible because the site houses the basic info of all Mozilla products, conveys Mozilla’s mission, vision, and values it stands for. Additionally, it promotes initiatives and campaigns in time of these events. The localized versions reach 60% of the Mozilla users globally. It is very important that, not only the main pages are localized, they are thoroughly tested before they are launched on production. Key links Production: https://www.mozilla.org/{locale_code}/ Staging: https://www-dev.allizom.org/{locale_code}/ Repository: https://github.com/mozilla-l10n/www.mozilla.org/ Pontoon: https://pontoon.mozilla.org/projects/mozillaorg/ Locamotion: https://mozilla.locamotion.org/projects/mozilla_lang/ Web dashboard: https://l10n.mozilla-community.org/webdashboard/?locale={locale_code}. Visit this page on a regular basis to check localization progress, pending work, deadline, and errors that were introduced during translation. It’s highly advised you to ask other community members to conduct peer review not only on Pontoon or Locamotion, but on staging. While not all the languages are required for certain projects, each community can opt in the projects at a later time. What to test Pre-l10n test Have your glossary available as a reference, select mozilla.org as Repository, your language as your Target Locale. For terminology consistency, reference the product or site that the page is for, assuming the product or site is localized (e.g.: Firefox, Test Pilot). Have the matching US page up as reference, though some strings may not be identical due to A/B testing. Have the project you just localized available for editing (Pontoon or Locamotion). Linguistic testing Translation quality in context. Grammar correctness in context. Truncation: button text should remain inside the button. Header line break wraps at proper place. Text not overlapping graphic. Terminology consistent with product, and among web pages. Brand names remain in English. Product names comply to Mozilla guideline and adhere to what the community has agreed to. No corrupted characters. Click on the links on the page, which should take you to the pages of the same language if they are localized, or they will be redirected to en-US if the pages are not.. Nav bar terms consistent with the page titles they are linked to (except when Nav bar term is shortened due to space limitation). Footer links don’t overlap with one another. You can make linguistic changes directly in Pontoon, Locamotion, or GitHub. Functionality testing Click the download link, you should be able to download the product in your language, if it is localized, such as Firefox. Font support and readability. Footer: verify that the translation of the link is coherent and the link is functional. Language list: is your language listed as one of the options? Check https://www-dev.allizom.org/en-US to confirm. Error page: deliberately type a broken link, such as https://www.mozilla.org/firefox/neu/, check whether 404 page is localized. If your language is RTL, make sure that the page layout and text flow in the correct directions. Compatibility testing: Test the page layout in other major browsers and on other platforms. Test the page layout on the leading locally developed browser if available. Test the page layout on mobile devices of major platforms. When can I see the localized page on the production server? Updated translations are pushed to the production server almost daily. When a brand new page is available for localization, it won’t be enabled in production until it’s fully localized. When existing pages receive updates with new strings, this new content won’t be displayed on production until localized, to avoid displaying a mix of English and localized text. In some cases pages receive major updates that require a complete rewrite of the template: if this happens, the old template is kept online only for a short period of time and, when removed, it will cause the URL to redirect users to the English version. Sync and update frequencies Pontoon syncs every 20 minutes to the repository. Pootle is imported manually (at least daily); an automated solution and faster sync will be implemented soon. Web Dashboard and the Dev server update every 15 minutes. If you work on Pontoon, it is safe to say that it will take less than an hour to see your changes reflected on the dashboard and the dev server. When a project has a firm deadline to meet, it will be communicated through the dev-l10n-web mailing list. Be sure to sign up so you receive important community wide information on web related projects. Testing dynamic pages This section focuses on instructions for testing pages with dynamically generated content. Each page or topic is different in terms of steps or flow. These instructions could change over time to reflect product design updates. Linguistic testing is the main focus. The instrutions below are detailed steps to get to the localized content so it can be reviewed in context. firefox/desktop/tips.lang Click on the next or back link to check out the tips on different features. Highlighted text is the same as in English. Text fits inside the box. firefox/new/horizon.lang Once page is loaded, click on the link called Download Firefox for another platform. For alternative message, change URL to Scene2. To fully review the Firefox download page messages, tests must go through following scenarios:. Desktop: Windows, macOS, Linux. Mobile: Android and iOS. Updating from older version of Firefox to the latest vs. downloading for the first time. firefox/sendto.lang The test can be done for all locales only on staging. For production testing, only these locales are enabled: de, en-GB, en-ZA, es-AR, es-CL, es-ES, es-MX, fr, id, pl, pt-BR, and ru. Enter a mobile phone number, a new page will be generated, suggesting the next action to take. Enter a phone number in the wrong phone number format. This will prompt an error message. firefox/tracking-protection-tour.lang Open Firefox and start a New Private Window. Once the window is launched, click on See how it works button. You are taken to step one. Click the Next button, it takes you to steps two and three. In step three, an extra text box appears. Click on Disable protection for this session button to generate a new \"step three\" message. Click on Enable protection button to toggle between \"enable\" and \"disable\" protection messages. NOTE: in order to see the message of Disable protection for this site, the browser must be in normal mode. Click on Got it! button to get to the next page. Click on Restart tour button to go through the above steps. mozorg/about/history.lang The slides should automatically scroll to the next in about 10 seconds or so. If it does not or it stops, click the next or previous arrows to go to the next slide. Be sure to cycle through until you see the first slide again to ensure you have covered all the slides. Text fits inside the box. mozorg/about/manifesto.lang You can check out the principles of the manifesto without going to the slide mode. However, only in the slide mode, all the localized content can be reviewed. Click on the first principle. Click on the “next” and the “previous” arrows to move from one slide to the next. Check on text layout, alignment and wrapping. Box size should be adjustable to fit all the content. "},"tools/mercurial/":{"url":"tools/mercurial/","title":"Mercurial tips","keywords":"","body":"Documentation for Mercurial How to trace a string back to a bug. "}}